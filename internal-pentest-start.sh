#!/bin/bash

# Place Script in the Root of the working directory
# This script also assumes you have the following tools in a folder called /Scripts"
##### INPUT LIST OF TOOLS NEEDED
# nmapscraper.py

#  Author: Daniel Brown
#  Contact: dbrow43@gmail.com
#  Updated: 02/16/2021
#

if [ $# -eq 0 ]; then
echo "Usage: ./ipt-enumerator <IP list in NMAP friendly format>";
echo "";
exit 1;
fi
echo "";
echo "";
echo -e "\e[1;96m Internal Pentesting Start Script by Daniel Brown \e[0m";
echo "";
echo "";


# User Input of Information #
echo -n " Input the number of top TCP ports you would like to scan greater than 0 : ";
read topports

if [ $topports -eq 0 ];
then
	echo -e "\e[34m I TOLD YOU GREATER THAN ZERO! \e[0m";
	exit 1;
fi

echo -n " How fast would you like this to run? Recommend 2500 for large organization. Speed = ";
read speed

#Folder Where you will store all source material. Ex. List of ports to be scanned, list of ip addresses, etc.
mkdir Source_Files
#Folder Where you will store all raw masscan and NMAP files.
mkdir Nmap_and_masscan_files
# Folder Where you will store information such as SMB_Version, RPC_Results,etc.
mkdir Host_Information
# Folder Where you will store Nmap Script Results
mkdir Nmap_Script_Results
# Folder where nmapscraper is located
mkdir /Scripts
# Copies nmapscraper to needed directory
mv nmapscraper.py /Scripts
# Gives nmapscraper.py the correct permissions to run
chmod +x Scripts/nmapscraper.py

#######Must Match above directories#######
f1='Source_Files';
f2='Nmap_and_masscan_files';
f3='Host_Information';
f4='Nmap_Script_Results';

# Creates List of Top Ports Indicated by User Input #
nmap -F -oG - 0.0.0.1 -v --top-ports $topports >$f1/listports;
echo "";
echo -e "\e[34m Ignore the NMAP 'Failed to determine route' and 'WARNING', it worked! \e[0m";
echo "";
cat $f1/listports | grep TCP | cut -d " " -f 4 | cut -d ";" -f 2 | cut -d ")" -f 1 > $f1/list-of-ports-scanned

value=$(cat $f1/list-of-ports-scanned);


## This portion is just so you can get started while the rest of it runs, if this is not how you work then comment this whole portion out

echo -e "\e[34m--Scanning for 445/TCP SMB First So You Can Get Started--\e[0m";
echo "";
masscan -p 445 -iL $1 --rate=$speed -oG $f2/masscan_445_only.gnmap
cat $f2/masscan_445_only.gnmap | grep 445/open/ | cut -d " " -f 2 > 445.txt
echo "";
echo -e "\e[34m--Starting SMB-Version Scanning--\e[0m";
echo "";
msfconsole -x "use auxiliary/scanner/smb/smb_version; set RHOSTS file:445.txt; set THREADS 25; spool $f3/smb-versions; run; exit"
echo "";
echo -e "\e[34m--SMB-Version Scanning Complete Look for smb_versions file--\e[0m";
echo "";
echo -e "\e[1;34m Open Up New Terminal and Get Started with 445 fun, the rest will take some time! \e[0m";
echo "";


#Port Scanning

echo -e "\e[34m Starting Full TCP Scan \e[0m";
echo "";
masscan -p $value -iL $1 --rate=$speed -oG $f2/masscan_top_$topports.gnmap
echo "";
echo -e "\e[34m Finished with TCP Scan \e[0m";
echo "";
echo -e "\e[34m Parsing Files \e[0m";
echo "";
/Scripts/nmapscraper.py $f2/masscan_top_$topports.gnmap
mv open-ports tcp-open-ports
echo -e "\e[34m Finished Parsing! Look in tcp-open-ports folder \e[0m";
echo "";

## Check for MySQL ##

if [ -f tcp-open-ports/3306.txt ]
then
	echo -e "\e[34m Running MySQL vulnerabilities check \e[0m";
	echo "";
	nmap -sS -vv -Pn -p 3306 -iL tcp-open-ports/3306.txt --script=mysql* -oN $f4/mysql-script-results
	echo "";
	echo -e "\e[34m Finished Running MySQL checks \e[0m";
	echo "";
fi

## Check for MSSQL ##

if [ -f tcp-open-ports/1433.txt ]
then
	echo -e "\e[34m Running MSSQL vulnerabilities check \e[0m";
	echo "";
	nmap -sSV -vv -Pn -p 1433 -iL tcp-open-ports/1433.txt --script=ms-sql* -oN $f4/mssql-script-results
	echo "";
	echo -e "\e[34m Finished Running MSSQL checks \e[0m";
	echo "";
fi

## Share Enumeration ##

if [ -f tcp-open-ports/139.txt ]
then
	echo -e "\e[34m Enumerating Share Information \e[0m";
	echo "";
	msfconsole -x "use auxiliary/scanner/smb/smb_enumshares; set RHOSTS file:tcp-open-ports/139.txt; set THREADS 10; spool $f3/Share_Information_Raw; run; exit"
	cat $f3/Share_Information_Raw | grep + > $f3/Share_Information
	rm $f3/Share_Information_Raw
	echo "";
	echo -e "\e[34m Finished Getting Share Information \e[0m";
	echo "";
fi

## RPC Null Session ##

if [ -f tcp-open-ports/389.txt ]
then
	echo -e "\e[34m Trying RPC Null Session User Enumeration \e[0m";
	echo "";
	for i in $(cat tcp-open-ports/389.txt);do echo $i;rpcclient -U "%" $i -c enumdomusers;done > $f3/rpcclient-results.txt
	echo "";
	echo -e "\e[34m Finished RPC Null Session Enumeration \e[0m";
	echo "";
fi

## FTP Checks ##

if [ -f tcp-open-ports/21.txt ]
then
	echo -e "\e[34m Checking for FTP Vulnerabilities \e[0m";
	echo "";
	nmap -sSV -vv -Pn -p 21 -iL tcp-open-ports/21.txt --script=ftp* -oN $f4/ftp-script-results
	echo "";
	echo -e "\e[34m Finished Checking For FTP Vulnerabilities \e[0m";
	echo "";
fi

## UDP Port Scanning (THIS SHOULD ALWAYS BE LAST BASED ON THE TIME IT TAKES TO FINISH) ##

#echo -e "\e[34m Starting UDP Scan Top 10 Only \e[0m";
#echo "";
#nmap -sP -iL $1 -PE -oG - | awk '/Up/{print $2}' > $f1/pingable_hosts.txt
#nmap -sUV -iL $f1/pingable_hosts.txt --top-ports 10 -oA $f2/nmap_sUV_top_10
#echo "";
#echo -e "\e[34m Finished with UDP Scan \e[0m";
#echo "";


echo "";
echo -e "\e[1;34m Finished Running Script \e[0m";
echo "";
